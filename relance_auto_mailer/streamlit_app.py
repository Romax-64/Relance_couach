# -*- coding: utf-8 -*-
"""
Created on Tue Jul  8 13:02:35 2025

@author: roman
"""

import sys
from pathlib import Path

ROOT = Path(__file__).resolve().parent.parent
if str(ROOT) not in sys.path:
    sys.path.insert(0, str(ROOT))

import streamlit as st
import tempfile
import logging
from pathlib import Path

from relance_auto_mailer import extract_data, envoyer_mails, settings

# Configuration de base du logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def main():
    # Configuration de la page Streamlit
    st.set_page_config(page_title="Relance Automatique", layout="centered")
    st.title("üìß Relance automatique")

    # Description succincte de l'application
    st.markdown("Ce logiciel g√©n√®re et envoie automatiquement les relances issues du portefeuille en deux √©tapes :")
    st.markdown("1. G√©n√©ration du fichier de relance √† partir du portefeuille")
    st.markdown("2. Envoi des e-mails de relance aux fournisseurs")

    # √âtape 1 : upload du fichier de commandes
    st.header("1. Chargement du fichier de commandes")
    st.markdown("Attention a nommer la feuille des retards : 'Retards'")
    commandes_file = st.file_uploader(
        "üìÑ S√©lectionnez le fichier portefeuille (.xlsx)", type=["xlsx"], key="cmd"
    )

    # Bouton de g√©n√©ration du fichier de relance
    if commandes_file and st.button("üõ† G√©n√©rer le fichier de relance"):
        # Affichage de la barre de progression
        progress = st.progress(0)
        # √âcriture temporaire du fichier upload√©
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
            tmp.write(commandes_file.read())
            cmd_path = Path(tmp.name)
        progress.progress(30)  # Mise √† jour de la progression

        try:
            # Appel √† la fonction d'extraction de donn√©es
            nb, sortie = extract_data(cmd_path)
            progress.progress(60)
            # Notification de succ√®s avec d√©tail
            st.success(f"‚úÖ Fichier g√©n√©r√© : {sortie} ({nb} lignes)")
            # Bouton de t√©l√©chargement du fichier g√©n√©r√©
            with open(sortie, "rb") as f:
                st.download_button(
                    "üì• T√©l√©charger le fichier de relance", data=f, file_name=Path(sortie).name
                )
        except Exception as e:
            # Log et affichage d'erreur
            logger.exception("Erreur lors de la g√©n√©ration du fichier de relance")
            st.error(f"Erreur : {e}")
        progress.progress(100)

    # √âtape 2 : param√®tres et envoi des relances
    st.header("2. Envoi des relances par e-mail")
    with st.expander("‚öôÔ∏è Param√®tres de messagerie et de la signature"):
        # Champs pour les param√®tres SMTP
        sender_name = st.text_input("Nom de l'exp√©diteur", value=settings.SENDER_NAME)
        sender_email = st.text_input("Adresse e-mail exp√©diteur", value=settings.SENDER_EMAIL)
        sender_password = st.text_input("Mot de passe ou token SMTP", type="password")
        st.markdown("‚ö†Ô∏è Le mot de passe n'est pas conserv√©")
        # Choix de la langue
        language = st.selectbox(
            "Langue par d√©faut", options=["FR", "EN"],
            index=0 if settings.DEFAULT_LANGUAGE.upper()=="FR" else 1
        )

    # Bouton pour d√©clencher l'envoi des relances
    if st.button("üì§ Envoyer les relances"):
        relance_path = Path("relance_fournisseurs.xlsx")  # fichier g√©n√©r√© √† l'√©tape 1
        # V√©rification pr√©alable
        if not relance_path.exists():
            st.error("Veuillez d'abord g√©n√©rer le fichier de relance.")
        elif not sender_email or not sender_password:
            st.error("Merci de remplir tous les param√®tres de messagerie.")
        else:
            # Mise √† jour des settings dynamiquement
            settings.SENDER_NAME = sender_name
            settings.DEFAULT_LANGUAGE = language
            settings.SENDER_EMAIL = sender_email
            settings.SENDER_PASSWORD = sender_password

            try:
                # Appel √† la fonction d'envoi des e-mails
                memoire_file = envoyer_mails(relance_path, sender_email, sender_password)
                st.success("üì¨ E-mails envoy√©s avec succ√®s !")
                # Bouton de t√©l√©chargement du m√©mo des relances
                with open(memoire_file, "rb") as f:
                    st.download_button(
                        "üì• T√©l√©charger le m√©mo des relances", data=f,
                        file_name=Path(memoire_file).name
                    )
            except Exception as e:
                # Log et affichage d'erreur en cas d'√©chec
                logger.exception("Erreur lors de l'envoi des relances")
                st.error(f"Erreur : {e}")
                
    st.markdown("¬© R√©alis√© par Romane‚ÄØFourrier - 2025 - Tous droits r√©serv√©s.")

# Point d'entr√©e
if __name__ == "__main__":
    main()
